/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package InterfacesGraficas;
import ClassesAtributo.Aluno;
import ClassesAtributo.Biblioteca;
import ClassesAtributo.Dissertacao;
import ClassesAtributo.Documento;
import ClassesAtributo.Livro;
import ClassesAtributo.ObraRara;
import ClassesAtributo.Periodico;
import ClassesAtributo.Tese;
import ClassesAtributo.Usuario;

/**
 *
 * @author Guilherme Cabral
 */
public class MenuPesquisaIdUser extends javax.swing.JFrame {

    /**
     * Creates new form MenuIDUser
     */
    
    private String action;
    
    public MenuPesquisaIdUser() {
        initComponents();
        //this.action = action;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        labIDUser = new javax.swing.JLabel();
        fieldIDUser = new javax.swing.JTextField();
        butPesquisar = new javax.swing.JButton();

        setTitle("Pesquisa Alterar");
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        labIDUser.setText("ID Usuário:");

        butPesquisar.setText("Pesquisar");
        butPesquisar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butPesquisarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(70, 70, 70)
                .addComponent(labIDUser)
                .addGap(30, 30, 30)
                .addComponent(fieldIDUser, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(70, 70, 70))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(butPesquisar)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fieldIDUser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labIDUser))
                .addGap(30, 30, 30)
                .addComponent(butPesquisar)
                .addContainerGap(50, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void butPesquisarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butPesquisarActionPerformed
        //Seta a variável para verificação de erros como false
        boolean error = false;
        switch (action) //Ler a descrição da função setActionButPesquisar(String s) dessa classe
        {
            case "Alt User":
                //Testa se a ID existe
                if(ClassesAtributo.Biblioteca.testaIDUser(fieldIDUser.getText()))
                {
                    //Abre uma janela de cadastro de usuário com os campos já preenchidos
                    
                    MenuCadastroUsuario menuAltUser = new MenuCadastroUsuario();
                    menuAltUser.setVisible(true);
                    menuAltUser.setTextButConfirmar("Alterar");
                    //Criando um usuário auxiliar para acessar seus dados
                    Usuario user = ClassesAtributo.Biblioteca.user(fieldIDUser.getText());
                    //Salvando a id caso o usuário seja alterado
                    ClassesAtributo.Biblioteca.setIDAuxiliar(user.getID());
                    //Preenchendo os campos
                    menuAltUser.setTextFieldNome(user.getNome());
                    menuAltUser.setTextFieldID(user.getID());
                    menuAltUser.setTextFieldEmail(user.getEmail());
                    menuAltUser.setTextFieldCPF(user.getCPF());
                    menuAltUser.setTextFieldNascimento(user.getNascimento());
                    //Selecionando item na box
                    if (user instanceof Aluno)
                    {
                        System.out.println(String.valueOf(user.getClass()));
                        menuAltUser.setBox("Aluno");
                    }
                    else
                    {
                        System.out.println(String.valueOf(user.getClass()));
                        menuAltUser.setBox("Professor");                        
                    }
                    //Fechando janela
                    dispose();
                }
                else
                {
                    error = true;
                }
                break;
            
            case "Del User":
                
                if(ClassesAtributo.Biblioteca.testaIDUser(fieldIDUser.getText()))
                {
                    System.out.println("del user");
                    //Cria uma tela de confirmação de exclusão
                    MenuDadosUser menuConfDel = new MenuDadosUser();
                    //Instancia um objeto auxiliar do tipo Usuario
                    Usuario user = ClassesAtributo.Biblioteca.user(fieldIDUser.getText());
                    //Mostra as informações na janela
                    menuConfDel.setTextLabNome(user.getNome());
                    menuConfDel.setTextLabID(user.getID());
                    menuConfDel.setTextLabEmail(user.getEmail());
                    menuConfDel.setTextLabCPF(user.getCPF());
                    menuConfDel.setTextLabNascimento(user.getNascimento());
                    //Verifica o vínculo para imprimir na janela
                    if (user instanceof Aluno)
                    {
                        menuConfDel.setTextLabVinculo("Aluno");
                    }
                    else
                    {
                        menuConfDel.setTextLabVinculo("Professor");                        
                    }
                    menuConfDel.pack();
                    menuConfDel.setLocationRelativeTo(null);
                    menuConfDel.setVisible(true);
                    dispose();
                }
                else
                {
                    error = true;
                }
                break;
                
            case "Alt Doc":                
                //Testa se a ID existe (fieldIDUser porque estamos reaproveitando uma variável)
                if(ClassesAtributo.Biblioteca.testaIDDoc(fieldIDUser.getText()))
                {
                    //Abre uma janela de cadastro de documento com os campos já preenchidos
                    
                    MenuCadastroDocumento menuAltDoc = new MenuCadastroDocumento();
                    menuAltDoc.setVisible(true);
                    menuAltDoc.setTextButCadastrar("Alterar");
                    //Criando um documento auxiliar para acessar seus dados
                    Documento doc = ClassesAtributo.Biblioteca.doc(fieldIDUser.getText());
                    //Salvando a id caso o documento seja alterado
                    ClassesAtributo.Biblioteca.setIDAuxiliar(doc.getID());
                    //Preenchendo os campos
                    menuAltDoc.setTextFieldTitulo(doc.getTitulo());
                    menuAltDoc.setTextFieldID(doc.getID());
                    menuAltDoc.setTextFieldAutor(doc.getAutor());
                    menuAltDoc.setTextFieldAssunto(doc.getAssunto());
                    menuAltDoc.setTextFieldAno(doc.getAno());
                    menuAltDoc.setTextFieldPaginas(doc.getPaginas());
                    menuAltDoc.setTextFieldQuantia(Integer.toString(doc.getQuantidade()));
                    //Selecionando item na box
                    if (doc instanceof Dissertacao)
                    {
                        System.out.println(String.valueOf(doc.getClass()));
                        menuAltDoc.setBox("Dissertação");
                    }
                    else if (doc instanceof Livro)
                    {
                        System.out.println(String.valueOf(doc.getClass()));
                        menuAltDoc.setBox("Livro");                        
                    }
                    else if (doc instanceof ObraRara)
                    {
                        System.out.println(String.valueOf(doc.getClass()));
                        menuAltDoc.setBox("Obra Rara");                        
                    }
                    else if (doc instanceof Periodico)
                    {
                        System.out.println(String.valueOf(doc.getClass()));
                        menuAltDoc.setBox("Periodico");                        
                    }
                    else if (doc instanceof Tese)
                    {
                        System.out.println(String.valueOf(doc.getClass()));
                        menuAltDoc.setBox("Tese");                        
                    }
                    //Fechando janela
                    dispose();
                }
                else
                {
                    error = true;
                }
                break;
                
            case "Del Doc":
                if(ClassesAtributo.Biblioteca.testaIDDoc(fieldIDUser.getText()))
                {
                    System.out.println("del doc");
                    //Cria uma tela de confirmação de exclusão
                    MenuDadosDoc menuConfDel = new MenuDadosDoc();
                    //Instancia um objeto auxiliar do tipo Documento
                    Documento doc = ClassesAtributo.Biblioteca.doc(fieldIDUser.getText());
                    //Mostra as informações na janela
                    menuConfDel.setTextLabTitulo(doc.getTitulo());
                    menuConfDel.setTextLabID(doc.getID());
                    menuConfDel.setTextLabAutor(doc.getAutor());
                    menuConfDel.setTextLabAssunto(doc.getAssunto());
                    menuConfDel.setTextLabPaginas(doc.getPaginas());
                    menuConfDel.setTextLabQuantia(Integer.toString(doc.getQuantidade()));
                    //Verifica o tipo para imprimir na janela
                    if (doc instanceof Dissertacao)
                    {
                        System.out.println(String.valueOf(doc.getClass()));
                        menuConfDel.setTextLabTipo("Dissertação");
                    }
                    else if (doc instanceof Livro)
                    {
                        System.out.println(String.valueOf(doc.getClass()));
                        menuConfDel.setTextLabTipo("Livro");                        
                    }
                    else if (doc instanceof ObraRara)
                    {
                        System.out.println(String.valueOf(doc.getClass()));
                        menuConfDel.setTextLabTipo("Obra Rara");                        
                    }
                    else if (doc instanceof Periodico)
                    {
                        System.out.println(String.valueOf(doc.getClass()));
                        menuConfDel.setTextLabTipo("Periodico");                        
                    }
                    else if (doc instanceof Tese)
                    {
                        System.out.println(String.valueOf(doc.getClass()));
                        menuConfDel.setTextLabTipo("Tese");                        
                    }
                    menuConfDel.pack();
                    menuConfDel.setLocationRelativeTo(null);
                    menuConfDel.setVisible(true);
                    dispose();
                }
                else
                {
                    error = true;
                }
            break;
            
            case "Pagamento":
                if(ClassesAtributo.Biblioteca.testaIDUser(fieldIDUser.getText()))
                {
                    System.out.println("paga");
                    //Cria uma tela de confirmação de exclusão
                    MenuPagamento menuPag = new MenuPagamento();
                    //Instancia um objeto auxiliar do tipo Documento
                    Usuario user = ClassesAtributo.Biblioteca.user(fieldIDUser.getText());
                    //Mostra as informações na janela
                    menuPag.setLabNome(user.getNome());
                    menuPag.setLabID(user.getID());
                    menuPag.setLabDivida("R$: " +(user.getDividaDocAtuais()+user.getDivida()));
                    menuPag.pack();
                    menuPag.setLocationRelativeTo(null);
                    menuPag.setVisible(true);
                    dispose();
                    
                    Biblioteca.setIDAuxiliar(user.getID());
                }
                else
                {
                    error = true;
                }
                break;
                
            case "Dados user":
                if(ClassesAtributo.Biblioteca.testaIDUser(fieldIDUser.getText()))
                {
                    System.out.println("dados user");
                    //Cria uma tela de dados
                    MenuDadosUser menuDados = new MenuDadosUser();
                    //Instancia um objeto auxiliar do tipo Usuario
                    Usuario user = ClassesAtributo.Biblioteca.user(fieldIDUser.getText());
                    //Mostra as informações na janela
                    menuDados.setTextLabNome(user.getNome());
                    menuDados.setTextLabID(user.getID());
                    menuDados.setTextLabEmail(user.getEmail());
                    menuDados.setTextLabCPF(user.getCPF());
                    menuDados.setTextLabNascimento(user.getNascimento());
                    menuDados.setTextButDeletar("Ok");
                    //Verifica o vínculo para imprimir na janela
                    if (user instanceof Aluno)
                    {
                        menuDados.setTextLabVinculo("Aluno");
                    }
                    else
                    {
                        menuDados.setTextLabVinculo("Professor");                        
                    }
                    menuDados.pack();
                    menuDados.setLocationRelativeTo(null);
                    menuDados.setVisible(true);
                    dispose();
                }
                else
                {
                    error = true;
                }
                break;
                
            case "Dados doc":
                if(ClassesAtributo.Biblioteca.testaIDDoc(fieldIDUser.getText()))
                {
                    System.out.println("dados doc");
                    //Cria uma tela de dados
                    MenuDadosDoc menuDados = new MenuDadosDoc();
                    //Instancia um objeto auxiliar do tipo Documento
                    Documento doc = ClassesAtributo.Biblioteca.doc(fieldIDUser.getText());
                    //Mostra as informações na janela
                    menuDados.setTextLabTitulo(doc.getTitulo());
                    menuDados.setTextLabID(doc.getID());
                    menuDados.setTextLabAutor(doc.getAutor());
                    menuDados.setTextLabAssunto(doc.getAssunto());
                    menuDados.setTextLabPaginas(doc.getPaginas());
                    menuDados.setTextLabQuantia(Integer.toString(doc.getQuantidade()));
                    menuDados.setTextButDeletar("Ok");
                    //Verifica o tipo para imprimir na janela
                    if (doc instanceof Dissertacao)
                    {
                        System.out.println(String.valueOf(doc.getClass()));
                        menuDados.setTextLabTipo("Dissertação");
                    }
                    else if (doc instanceof Livro)
                    {
                        System.out.println(String.valueOf(doc.getClass()));
                        menuDados.setTextLabTipo("Livro");                        
                    }
                    else if (doc instanceof ObraRara)
                    {
                        System.out.println(String.valueOf(doc.getClass()));
                        menuDados.setTextLabTipo("Obra Rara");                        
                    }
                    else if (doc instanceof Periodico)
                    {
                        System.out.println(String.valueOf(doc.getClass()));
                        menuDados.setTextLabTipo("Periodico");                        
                    }
                    else if (doc instanceof Tese)
                    {
                        System.out.println(String.valueOf(doc.getClass()));
                        menuDados.setTextLabTipo("Tese");                        
                    }
                    menuDados.pack();
                    menuDados.setLocationRelativeTo(null);
                    menuDados.setVisible(true);
                    dispose();
                }
                else
                {
                    error = true;
                }
                break;            
        }
        if (error)
        {
            TelaErro msgErro = new TelaErro();
            msgErro.setTextLabErro("A ID não existe.");
            msgErro.pack();
            msgErro.setLocationRelativeTo(null);
            msgErro.setVisible(true);
        }
    }//GEN-LAST:event_butPesquisarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MenuPesquisaIdUser.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MenuPesquisaIdUser.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MenuPesquisaIdUser.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MenuPesquisaIdUser.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MenuPesquisaIdUser().setVisible(true);
            }
        });
    }
    
    // Seta o texto da label para "ID Documento";
    public void setLabelTextDoc()
    {
        labIDUser.setText("ID Documento:");
    }
    
    //Seta qual será o case usado quando o botão pesquisar for clicado
    public void setActionButPesquisar(String s)
    {
        action = s;
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton butPesquisar;
    private javax.swing.JTextField fieldIDUser;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel labIDUser;
    // End of variables declaration//GEN-END:variables
}
